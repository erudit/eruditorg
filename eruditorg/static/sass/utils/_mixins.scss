// -----------------------------------------------------------------------------
// Import Bootstrap mixins
// -----------------------------------------------------------------------------

// Utilities
@import
  '../vendor/bootstrap-mixins/hide-text',
  '../vendor/bootstrap-mixins/opacity',
  '../vendor/bootstrap-mixins/image',
  '../vendor/bootstrap-mixins/labels',
  '../vendor/bootstrap-mixins/reset-filter',
  '../vendor/bootstrap-mixins/resize',
  '../vendor/bootstrap-mixins/responsive-visibility',
  '../vendor/bootstrap-mixins/size',
  '../vendor/bootstrap-mixins/tab-focus',
  '../vendor/bootstrap-mixins/reset-text',
  '../vendor/bootstrap-mixins/text-emphasis',
  '../vendor/bootstrap-mixins/text-overflow',
  '../vendor/bootstrap-mixins/vendor-prefixes',
  '../vendor/bootstrap-mixins/clearfix',
  '../vendor/bootstrap-mixins/nav-vertical-align',
  '../vendor/bootstrap-mixins/border-radius';

// Components
@import
  '../vendor/bootstrap-mixins/alerts',
  '../vendor/bootstrap-mixins/buttons',
  '../vendor/bootstrap-mixins/panels',
  '../vendor/bootstrap-mixins/pagination',
  '../vendor/bootstrap-mixins/list-group',
  '../vendor/bootstrap-mixins/nav-divider',
  '../vendor/bootstrap-mixins/forms',
  '../vendor/bootstrap-mixins/progress-bar',
  '../vendor/bootstrap-mixins/table-row';

// Skins
@import
  '../vendor/bootstrap-mixins/background-variant',
  '../vendor/bootstrap-mixins/gradients';

// Layout
@import
  '../vendor/bootstrap-mixins/center-block',
  '../vendor/bootstrap-mixins/grid-framework',
  '../vendor/bootstrap-mixins/grid';


// -----------------------------------------------------------------------------
// App-specific mixins
// -----------------------------------------------------------------------------

// font styles
@mixin font-styles($font-family) {

  @if $font-family == 'mono' {
    @include fw-mono;

    em, i    { @include fw-mono-italic; }

  }

  @if $font-family == 'sans' {
    @include fw-sans;

    em, i    { @include fw-sans-italic; }

    strong, b  { @include fw-sans-bold; }

    // bold italics
    em strong,
    strong em,
    i strong,
    strong i,
    b i,
    i b {
      @include fw-sans-medium-italic;
    }

  }

  @if $font-family == 'sans-medium' {
    @include fw-sans-medium;

    em, i    { @include fw-sans-medium-italic; }

    strong, b  { @include fw-sans-bold; }

    // bold italics
    em strong,
    strong em,
    i strong,
    strong i,
    b i,
    i b {
      @include fw-sans-bold-italic;
    }

  }

  @if $font-family == 'serif' {
    @include fw-serif;

    em, i    { @include fw-serif-italic; }

    strong, b  { @include fw-serif-bold; }

    // bold italics
    em strong,
    strong em,
    i strong,
    strong i,
    b i,
    i b {
      @include fw-serif-bold-italic;
    }

  }

  @if $font-family == 'serif-bold' {
    @include fw-serif-bold;

    em, i    { @include fw-serif-bold-italic; }

    strong, b  { @include fw-serif; }

    // bold italics
    em strong,
    strong em,
    i strong,
    strong i,
    b i,
    i b {
      @include fw-serif-italic;
    }

  }

}

// Remove list styles
@mixin list-unstyled() {
  margin: 0;
  padding: 0;
  list-style: none;
  li {
    margin: 0;
    padding: 0;
  }
}

// Vertical centering
@mixin vertical-centered($position: relative) {
  position: $position;
  top: 50%;
  -webkit-filter: blur(0);
  @include translate(0,-50%);
}

@mixin parent-box-centered($position: absolute) {
  position: $position;
  top: 50%;
  left: 50%;
  -webkit-filter: blur(0);
  @include translate(-50%,-50%);
}

// Keyframe animations
@mixin keyframes($animationName) {
  @-webkit-keyframes #{$animationName} {
    @content;
  }
  @-moz-keyframes #{$animationName} {
    @content;
  }
  @-o-keyframes #{$animationName} {
    @content;
  }
  @keyframes #{$animationName} {
    @content;
  }
}

/// Border-radius vendor prefixes
@mixin border-radius($radius) {
  -webkit-border-radius: $radius;
  -moz-border-radius: $radius;
  -ms-border-radius: $radius;
  border-radius: $radius;
}

// Column-break-inside vendor prefixes
@mixin column-break-inside($break) {
  -webkit-column-break-inside: $break;
  -moz-column-break-inside: $break;
  -o-column-break-inside: $break;
  -ms-column-break-inside: $break;
  column-break-inside: $break;
}

// Column-count vendor prefixes
@mixin column-count($count) {
  min-height: 100%;
  -webkit-column-count: $count;
  -moz-column-count: $count;
  -o-column-count: $count;
  column-count: $count;
}

// force breaks for long text, e.g. URLs
@mixin force-break() {
  overflow-wrap: break-word;
  word-wrap: break-word;
  -ms-word-break: break-all;
  word-break: break-all;
  word-break: break-word;
}

// transforms
@mixin transform($transforms) {
  -moz-transform: $transforms;
  -o-transform: $transforms;
  -ms-transform: $transforms;
  -webkit-transform: $transforms;
  transform: $transforms;
}



/// Event wrapper
/// @author Harry Roberts
/// @param {Bool} $self [false] - Whether or not to include current selector
/// @link https://twitter.com/csswizardry/status/478938530342006784 Original tweet from Harry Roberts
@mixin on-event($self: false) {
  @if $self {
    &,
    &:hover,
    &:active,
    &:focus {
      @content;
    }
  } @else {
    &:hover,
    &:active,
    &:focus {
      @content;
    }
  }
}

// Create a top or bottom border for Bootstrap's grid cell
@mixin grid-cell-border($direction: 'top', $border-width: 1px, $border-color: $black) {
  position: relative;

  @if $direction == 'top' {
    &:before {
      content: '';
      display: block;
      height: 1px;
      border-top: $border-width solid $border-color;
      position: absolute;
      left: $grid-gutter-width/2;
      right: $grid-gutter-width/2;
      top: 0;
    }
  }

  @if $direction == 'bottom' {
    &:after {
      content: '';
      display: block;
      height: 1px;
      border-top: $border-width solid $border-color;
      position: absolute;
      left: $grid-gutter-width/2;
      right: $grid-gutter-width/2;
      bottom: 0;
      // clear: both;
    }
  }
}

/// Make a context based selector a little more friendly
/// @author Hugo Giraudel
/// @param {String} $context
@mixin when-inside($context) {
  #{$context} & {
    @content;
  }
}

/// Responsive manager
/// @param {String} $breakpoint - Breakpoint
/// @requires $breakpoints
/// @link http://sass-guidelin.es/#breakpoint-manager Sass Guidelines - Breakpoint Manager
@mixin respond-to($breakpoint) {
  $query: map-get($breakpoints, $breakpoint);

  @if not $query {
    @error 'No value found for `#{$breakpoint}`. Please make sure it is defined in `$breakpoints` map.';
  }

  @media #{if(type-of($query) == 'string', unquote($query), inspect($query))} {
    @content;
  }
}


/// Arrows
@mixin rotate($angle) {
  -moz-transform: rotate($angle);
  -ms-transform: rotate($angle);
  -webkit-transform: rotate($angle);
  transform: rotate($angle);
}

@mixin arrow($arrowSize: 20px, $arrowBorderSize: 3px, $arrowBarWidth: 2px, $arrowBarHeight: 25px) {
  display: inline-block;
  height: $arrowSize;
  position: relative;
  width: $arrowSize;

  &::after {
    border-bottom-style: solid;
    border-bottom-width: $arrowBorderSize;
    border-right-style: solid;
    border-right-width: $arrowBorderSize;
    content: '';
    display: inline-block;
    height: $arrowSize;
    left: 0;
    position: absolute;
    top: 0;
    width: $arrowSize;
  }

  // Triangle shape state
  &.is-triangle::after {
    border-style: solid;
    border-width: 0 0 $arrowSize $arrowSize;
    height: 0;
    width: 0;
  }

  // Check shape state
  &.is-check::after {
    width: $arrowSize / 2;
  }

  // Arrow Bar
  &.arrow-bar::before {
    bottom: 1px;
    content: '';
    height: $arrowBarHeight;
    position: absolute;
    right: 0;
    transform-origin: bottom;
    width: $arrowBarWidth;
    @include rotate(-45deg);
  }

  // States
  &.is-top {
    @include rotate(225deg);
  }

  &.is-right {
    @include rotate(315deg);
  }

  &.is-bottom {
    @include rotate(45deg);
  }

  &.is-left {
    @include rotate(135deg);
  }
}

@mixin arrowColor($color) {
  &,
  .arrow {
    &::after {
      border-color: $color;
    }

    &.is-triangle::after {
      border-color: transparent;
      border-bottom-color: $color;
    }

    &::before {
      background-color: $color;
    }
  }
}
